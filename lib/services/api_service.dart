import 'dart:io';
import 'package:dio/dio.dart';
import 'package:dio/io.dart'; // For IOHttpClientAdapter in Dio v5
import 'package:retrofit/retrofit.dart';
import '../data/evolution_chain_data.dart';
import '../data/evolution_chain_link_data.dart';
import '../data/pokemon_detail_data.dart';
import '../data/pokemon_list_response_data.dart';
import '../data/pokemon_species_data.dart';

part 'api_service.g.dart';

/// Retrofit interface for the PokeAPI
/// This will be implemented automatically by retrofit_generator.
@RestApi(baseUrl: 'https://pokeapi.co/api/v2/')
abstract class ApiService {
  /// This factory constructor is generated by retrofit_generator
  /// You normally don't call `_ApiService` yourself – retrofit does it.
  factory ApiService(Dio dio, {String baseUrl}) = _ApiService;

  /// Factory helper to create an ApiService with pre-configured Dio
  /// - timeoutSeconds: how long to wait for connection & responses
  /// - allowBadCertificates: true only for development/testing
  /// - baseUrl: API base URL
  /// - enableLogging: logs requests and responses to console
  static ApiService create({
    int timeoutSeconds = 10,
    bool allowBadCertificates = false, // ⚠ Only in development
    String baseUrl = 'https://pokeapi.co/api/v2/',
    bool enableLogging = true,
  }) {
    // Create Dio instance with default options
    final dio = Dio(
      BaseOptions(
        baseUrl: baseUrl, // Base URL for all requests
        connectTimeout: Duration(seconds: timeoutSeconds),
        receiveTimeout: Duration(seconds: timeoutSeconds),
      ),
    );

    // Add logging interceptor (optional)
    if (enableLogging) {
      dio.interceptors.add(
        LogInterceptor(requestBody: true, responseBody: true),
      );
    }

    // Allow invalid SSL certificates (for local dev / mock servers)
    if (allowBadCertificates) {
      // IOHttpClientAdapter is used in Dio v5 (DefaultHttpClientAdapter in older versions)
      dio.httpClientAdapter = IOHttpClientAdapter(
        createHttpClient: () {
          final client = HttpClient();
          client.badCertificateCallback =
              (X509Certificate cert, String host, int port) => true;
          return client;
        },
      );
    }

    return ApiService(dio); // baseUrl is taken from dio.options.baseUrl
  }

  // -----------------------
  // API Endpoints
  // -----------------------

  /// Fetches a paginated list of Pokémon
  /// - [offset]: where to start in the list
  /// - [limit]: how many items to fetch
  /// Example: offset=20, limit=10 → returns items 21-30
  @GET('pokemon') // No leading "/" because baseUrl already ends with "/"
  Future<PokemonListResponseData> getPokemonList({
    @Query('limit') required int limit,
  });

  /// Fetches detailed data for a single Pokémon by its name
  /// Example: getPokemonDetail("pikachu")
  @GET('pokemon/{name}')
  Future<PokemonDetailData> getPokemonDetail(@Path('name') String name);

  @GET('pokemon-species/{name}')
  Future<PokemonSpeciesData> getPokemonSpecies(@Path('name') String name);

  @GET('evolution-chain/{id}')
  Future<EvolutionChainData> getEvolutionChain(@Path('id') int id);
}
